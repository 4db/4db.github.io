<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>aldb</title><description>Web, code &amp; dev</description><link>http://aldb.github.io/</link><generator>Ghost 0.5</generator><lastBuildDate>Tue, 17 Feb 2015 05:29:47 GMT</lastBuildDate><atom:link href="http://aldb.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>SQL Joins</title><description>&lt;p&gt;Differense between SQL JOINs is the most popular question on enterview. &lt;br&gt;
So create &lt;b&gt;Table a&lt;/b&gt; is on the left, and &lt;b&gt;Table b&lt;/b&gt; is on the right. &lt;/p&gt;

&lt;h4 id="createtables"&gt;Create tables&lt;/h4&gt;

&lt;pre&gt;
+------++------+
| &lt;b&gt;a&lt;/b&gt;    || &lt;b&gt;b&lt;/b&gt;    |
+------++------+
|    &lt;span style="color:green"&gt;1&lt;/span&gt; ||    &lt;span style="color:green"&gt;1&lt;/span&gt; |
|    &lt;span style="color:green"&gt;2&lt;/span&gt; ||    &lt;span style="color:green"&gt;2&lt;/span&gt; |
| &lt;span style="color:#ccc"&gt;NULL&lt;/span&gt; || &lt;span style="color:#ccc"&gt;NULL&lt;/span&gt; |
|   &lt;span style="color:red"&gt;10&lt;/span&gt; ||   &lt;span style="color:red"&gt;20&lt;/span&gt; |
+------++------+
&lt;/pre&gt;

&lt;p&gt;Sql query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DROP TABLE IF EXISTS `a`;
CREATE TABLE `a` (
  `a` int(11) NULL
) ENGINE=InnoDB AUTO_INCREMENT=0;

INSERT INTO `a` ( `a`) 
VALUES 
  ( '1'),
  ( '2'),
  ( NULL),
  ( 10);


DROP TABLE IF EXISTS `b`;
CREATE TABLE `b` (
  `b` int(11) NULL
) ENGINE=InnoDB AUTO_INCREMENT=0;

INSERT INTO `b` ( `b`) 
VALUES 
  ( '1'),
  ( '2'),
  ( NULL),
  ( 20);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="delinnerdeljoinandstraight_join"&gt;&lt;del&gt;INNER&lt;/del&gt; JOIN AND STRAIGHT_JOIN&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;The INNER JOIN keyword selects all rows from both tables. INNER JOIN is the same as JOIN.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A &lt;b&gt;STRAIGHT_JOIN&lt;/b&gt; identifies and combines matching rows which are stored in two related tables. This is what an inner join also does. The difference between an inner join and a straight join is that a straight join forces MySQL to read the &lt;b&gt;left table first&lt;/b&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://aldb.github.io/content/images/2015/02/join1.png" alt=""&gt;&lt;/p&gt;

&lt;pre&gt;
SELECT * FROM a &lt;b&gt;JOIN&lt;/b&gt; b ON a=b;
SELECT * FROM b &lt;b&gt;JOIN&lt;/b&gt; a ON b=a;
&lt;/pre&gt;

&lt;pre&gt;
+------+------+
| &lt;b&gt;a&lt;/b&gt;    | &lt;b&gt;b&lt;/b&gt;    |
+------+------+
|    &lt;span style="color:green"&gt;1&lt;/span&gt; |    &lt;span style="color:green"&gt;1&lt;/span&gt; |
|    &lt;span style="color:green"&gt;2&lt;/span&gt; |    &lt;span style="color:green"&gt;2&lt;/span&gt; |
+------+------+
&lt;/pre&gt;

&lt;p&gt;Without condition ON we make &lt;b&gt; CROSS JOIN &lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;
SELECT * FROM b &lt;b&gt;JOIN&lt;/b&gt; a;
SELECT * FROM a,b; 
&lt;/pre&gt;

&lt;p&gt;OR  &lt;/p&gt;

&lt;pre&gt;
 SELECT FROM a &lt;b&gt;CROSS JOIN&lt;/b&gt; b;
&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://aldb.github.io/content/images/2015/02/join8.png" alt=""&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+------+------+
| b    | a    |
+------+------+
|    1 |    1 |
|    2 |    1 |
| NULL |    1 |
|   20 |    1 |
|    1 |    2 |
|    2 |    2 |
| NULL |    2 |
|   20 |    2 |
|    1 | NULL |
|    2 | NULL |
| NULL | NULL |
|   20 | NULL |
|    1 |   10 |
|    2 |   10 |
| NULL |   10 |
|   20 |   10 |
+------+------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="leftjoinleftdelouterdeljoin"&gt;LEFT JOIN == LEFT &lt;del&gt;OUTER&lt;/del&gt; JOIN&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;The LEFT JOIN keyword returns all rows from the left table (A), with the matching rows in the right table (B). The result is NULL in the right side when there is no match.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;
SELECT * FROM a &lt;b&gt;LEFT JOIN&lt;/b&gt; b ON a=b;
&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://aldb.github.io/content/images/2015/02/join2.png" alt=""&gt;&lt;/p&gt;

&lt;pre&gt;
+------+------+
| &lt;b&gt;a&lt;/b&gt;    | &lt;b&gt;b&lt;/b&gt;    |
+------+------+
|    1 |    1 |
|    2 |    2 |
| NULL | &lt;span style="color:red"&gt;NULL&lt;/span&gt; |
|   10 | &lt;span style="color:red"&gt;NULL&lt;/span&gt; |
+------+------+
&lt;/pre&gt;

&lt;p&gt;If add WHERE condition:&lt;/p&gt;

&lt;pre&gt;
SELECT * FROM a &lt;b&gt;LEFT JOIN&lt;/b&gt; b ON a=b &lt;b&gt;WHERE b IS NULL&lt;/b&gt;;
&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://aldb.github.io/content/images/2015/02/join3.png" alt=""&gt;&lt;/p&gt;

&lt;pre&gt;
+------+------+
| a    | b    |
+------+------+
| NULL | NULL |
|   10 | NULL |
+------+------+
&lt;/pre&gt;

&lt;h4 id="rightjoinrightdelouterdeljoin"&gt;RIGHT JOIN = RIGHT &lt;del&gt;OUTER&lt;/del&gt; JOIN&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;The RIGHT JOIN keyword returns all rows from the right table (B), with the matching rows in the left table (A). The result is NULL in the left side when there is no match.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;
SELECT * FROM a &lt;b&gt;RIGHT JOIN&lt;/b&gt; b ON a=b
&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://aldb.github.io/content/images/2015/02/join4.png" alt=""&gt;&lt;/p&gt;

&lt;pre&gt;
+------+------+
| a    | b    |
+------+------+
|    1 |    1 |
|    2 |    2 |
| &lt;span style="color:red"&gt;NULL&lt;/span&gt; | NULL |
| &lt;span style="color:red"&gt;NULL&lt;/span&gt; |   20 |
+------+------+
&lt;/pre&gt;

&lt;pre&gt;
SELECT * FROM a &lt;b&gt;RIGHT JOIN&lt;/b&gt; b ON a=b &lt;b&gt;WHERE a IS NULL&lt;/b&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://aldb.github.io/content/images/2015/02/join5.png" alt=""&gt;&lt;/p&gt;

&lt;pre&gt;
+------+------+
| a    | b    |
+------+------+
| NULL | NULL |
| NULL |   20 |
+------+------+
&lt;/pre&gt;

&lt;h4 id="fullouter"&gt;FULL OUTER&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;The FULL OUTER JOIN keyword returns all rows from the left table (A) and from the right table (B).
The FULL OUTER JOIN keyword combines the result of both LEFT and RIGHT joins.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;
SELECT * FROM a &lt;b&gt;FULL OUTER JOIN&lt;/b&gt; b ON a=b
&lt;/pre&gt;

&lt;p&gt;MYSQL don't have FULL JOINS, but can sure &lt;a href="http://dev.mysql.com/doc/refman/5.0/en/outer-join-simplification.html"&gt;emulate&lt;/a&gt; them.&lt;/p&gt;

&lt;pre&gt;
SELECT * FROM a LEFT JOIN b ON a = b
UNION
SELECT * FROM a RIGHT JOIN b ON a=b
&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://aldb.github.io/content/images/2015/02/join6.png" alt=""&gt;&lt;/p&gt;

&lt;pre&gt;
+------+------+
| a    | b    |
+------+------+
&lt;span style="color:green"&gt;|    1 |    1 |
|    2 |    2 |
| NULL | NULL |&lt;/span&gt;
|   10 | &lt;span style="color:red"&gt;NULL&lt;/span&gt; |
| &lt;span style="color:red"&gt;NULL&lt;/span&gt; |   20 |
+------+------+
&lt;/pre&gt;

&lt;pre&gt;
SELECT * FROM a &lt;b&gt;FULL OUTER JOIN b ON a=b
WHERE a IS null OR b IS null&lt;/b&gt;
&lt;/pre&gt;

&lt;p&gt;For MYSQL:  &lt;/p&gt;

&lt;pre&gt;
SELECT * FROM a LEFT JOIN b ON a = b WHERE b IS NULL 
UNION 
SELECT * FROM a RIGHT JOIN b ON a=b WHERE a IS NULL; 
&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://aldb.github.io/content/images/2015/02/join7.png" alt=""&gt;&lt;/p&gt;

&lt;pre&gt;
+------+------+
| a    | b    |
+------+------+
&lt;span style="color:green"&gt;| NULL | NULL |&lt;/span&gt;
|   10 | &lt;span style="color:red"&gt;NULL&lt;/span&gt; |
| &lt;span style="color:red"&gt;NULL&lt;/span&gt; |   20 |
+------+------+
&lt;/pre&gt;</description><link>http://aldb.github.io/2015/02/13/sql-joins/</link><guid isPermaLink="false">c293d01b-b31c-401f-8cbc-cae19e784f3f</guid><category>sql</category><category>mysql</category><category>join</category><dc:creator>Alex</dc:creator><pubDate>Fri, 13 Feb 2015 22:33:49 GMT</pubDate></item><item><title>Ключевое различия между веб серверами: Apache, IIS vs Nginx, Node.js.</title><description>&lt;p&gt;На сегодняшний день популярными веб серверами являются: &lt;strong&gt;Apache, IIS, Nginx, Node.js.&lt;/strong&gt; У каждого веб сервера есть своя история, фокус на технологиях, предпочитаемые ОС и многое другое. &lt;/p&gt;

&lt;p&gt;Но есть принципиальное различие в процессе обработки запросов.&lt;/p&gt;

&lt;h4 id=""&gt;Для чего нужны веб серверы?&lt;/h4&gt;

&lt;p&gt;Для начало вспомним как работаю веб серверы.
Веб серверы нужны для работы с веб приложениями по клиент-серверной модели. Их задача обработка запроса от пользователя(клиента, client) и возвращения результата запроса с сервера(backend, serverside). Подробнее можно ознакомиться на википедии:
&lt;a href="http://en.wikipedia.org/wiki/Client%E2%80%93server_model"&gt;Client–server model&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=""&gt;Ресурсы веб серверов&lt;/h4&gt;

&lt;p&gt;Каждый сервер имеет выделенные "ресурсы"(Оперативная память, процессор и т.п.) для обработки запросов. Данные ресурсы используются в потоках и процессах:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Thread_(computing)"&gt;Thread_(computing)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Process_(computing)"&gt;Process_(computing)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Различие в распределении ресурсов на обработку запросов является ключевым отличием для расматриваемых веб серверов.&lt;/p&gt;

&lt;h4 id="processbasedwebservesapacheiis"&gt;Process-based web serves: Apache, IIS.&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Apache, IIS&lt;/strong&gt; используют обрабатывают каждый запрос в отдельном потоке/процессе - &lt;strong&gt;“process-based”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://aldb.github.io/content/images/2015/02/process-based-server-2.png" alt=""&gt;
&lt;center&gt;Схема работы “process-based” веб серверов.&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;На каждый запрос клиента используется отдельный процесс/поток. Каждый поток/процесс требует определенное кол-во ресурсов серверов. Ресурсы сервера “простаивают” пока ожидают отправку запроса и ответа клиента. Что отрицательно сказывается на производительности при высоких нагрузках, когда выделенных процессов поток недостаточно для обработки всех запросов.&lt;/p&gt;

&lt;h4 id="eventbasedwebservesnginxnodejs"&gt;Event-based web serves: Nginx, Node.js.&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Event-based&lt;/strong&gt; веб сервера работаю на одном процессе/потоке, используя все выделенные ресурсы.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://aldb.github.io/content/images/2015/02/event-based-server-3.png" alt=""&gt;
&lt;center&gt;Схема работы Event-based веб сервера.&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;loop-event&lt;/strong&gt; - бесконечный цикл обработки запросов. Данный цикл отслеживает состояние запроса(прием запроса от клиента, обработка и отправка ответа). &lt;/p&gt;

&lt;p&gt;В единичном процессе/потоке(&lt;strong&gt;Singe process/thread&lt;/strong&gt;) используются все ресурсы веб сервера, позволяя обрабатывать запросы максимально быстро, а в случаи задержки(получение данных от клиента, отправки данных клиенту) работать с другими запросами из очереди(&lt;strong&gt;Event Queue&lt;/strong&gt;) т.е асинхронно.&lt;/p&gt;

&lt;h4 id=""&gt;Итог&lt;/h4&gt;

&lt;p&gt;Схема &lt;strong&gt;event-based(Node.js, Nginx)&lt;/strong&gt; показывает большую производительность при высоких нагрузках. Это связано с тем что не нужно делить ресурсы сервера между другими потоками/процессами. Также серверные ресурсы всегда используются без “простоя”. &lt;/p&gt;

&lt;h4 id=""&gt;Ссылки&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/108241/"&gt;Вы наверное шутите, мистер Дал, или почему Node.js — это венец эволюции веб-серверов&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://berb.github.io/diploma-thesis/original/042_serverarch.html#42"&gt; Concurrent Programming for Scalable Web Architectures
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wikivs.com/wiki/apache_vs_nginx"&gt;Apache vs nginx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><link>http://aldb.github.io/2015/02/05/apache-iis-vs-nginx-nodejs/</link><guid isPermaLink="false">d78b5c8f-bb66-49ab-85a1-7eceff35b959</guid><category>nodejs</category><category>apache</category><category>nginx</category><category>web</category><category>server</category><category>iis</category><dc:creator>Alex</dc:creator><pubDate>Thu, 05 Feb 2015 17:29:08 GMT</pubDate></item><item><title>include() vs require() &amp; require_once() vs include_once()</title><description>&lt;p&gt;&lt;img src="http://aldb.github.io/content/images/2014/11/rrrr.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;В php ф-ии include, require отвечают за вставку кода из одних файлов в другие. Ф-ии имеют одинаковый синтаксис:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include('file');
require('file');
include 'file';
require 'file';
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Данные ф-ии производят вставку и выполнение кода из указанного файла, но имеют следующие различия в случаи ошибки(файл не найден):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require - Fatal error(E_COMPILE_ERROR), т.е останока скрипта

include - Warning error(E_WARNING) и продолжение выполнение сценария.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если в настройках PHP указано отображение ошибок пользователь увидит данный ошибку и что хуже вашу структуру файлов.&lt;/p&gt;

&lt;p&gt;Использование require более рационально в целях безопастности.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require_once и include_once отличаются:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если код из файла уже один раз был включен, он не будет включен и выполнен повторно.&lt;/p&gt;

&lt;p&gt;Например:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var_dump(include_once 'file.php'); // exec script
var_dump(include_once 'file.php'); // bool(true)

var_dump(require_once 'file.php'); // bool(true)
var_dump(require_once 'file.php'); // bool(true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Выполнение файла кода в файле file.php произойдет только при первом запуске include_once. В остальных случаях ф-ия вернет true - файл уже подключен.&lt;/p&gt;

&lt;p&gt;Что бы избежать ошибок используются относительные пути:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(dirname(__FILE__).'/params.php');

//__FILE__ - абсолютный путь с разрешенными символическими ссылками
include_once(dirname(__FILE__) . '/database.class.php');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Так же можно проверить подключение файлов, например с определением константы:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;define('__ROOT__', dirname(dirname(__FILE__))); 
require_once(__ROOT__.'/config.php'); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для автоматической загрузки классов используются функция     &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spl_autoload_register().
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Пример загруки с использованием ф-ии&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function myAutoloader($className) {
    $path = '/path/to/class/';

    include $path.$className.'.php';
}

spl_autoload_register('myAutoloader');
$myClass = new MyClass();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Пример использования автозагрузки с использованием классов&lt;/p&gt;

&lt;p&gt;spl_autoload_register('MyAutoloader::ClassLoader'); &lt;br&gt;
spl_autoload_register('MyAutoloader::HelperLoader'); &lt;br&gt;
spl_autoload_register('MyAutoloader::DatabaseLoader');&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyAutoloader {
    public $path = '/path/to/class/';

    public static function ClassLoader($className){
         require $this-&amp;gt;path . 'className.php';
    }


    public static function LibraryLoader($className) {
         require $this-&amp;gt;path . 'className.php';
    }
&lt;/code&gt;&lt;/pre&gt;</description><link>http://aldb.github.io/2014/11/11/include-vs-require-require_once-vs-include_once/</link><guid isPermaLink="false">87e73ab9-ddd5-4857-b222-9da72d295900</guid><category>php</category><dc:creator>Alex</dc:creator><pubDate>Wed, 12 Nov 2014 05:38:39 GMT</pubDate></item><item><title>Datetime PHP like Python</title><description>&lt;p&gt;Разработка данных datetime удобнее с использованием Unix формата(числа).&lt;/p&gt;

&lt;p&gt;Datetime in PHP:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$today = date("Y-m-d H:i:s");  //MYSQL
$date = date();
echo $date-&amp;gt;format("Y-m-d H:i:s"); //echo Date in format

$today = date('h-i-s, j-m-y, it is w Day'); // 05-16-18, 10-03-01, 1631 1618 6 Satpm01
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Datetime in Python:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from datetime import datetime
date_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Datetime from MSSQL in Mysql in Python:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;date_object = datetime.strptime(date, '%b %d %Y %I:%M%p')
date_object.strftime('%Y-%m-%d %H:%M:%S') #MySQL format
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Так что ф-ии datetime в Python похожи на PHP. И не только datetime.&lt;/p&gt;</description><link>http://aldb.github.io/2014/10/31/rabota-s-datetime-php-vs-python/</link><guid isPermaLink="false">ca659b2d-47d7-4396-b87a-2ba754226c23</guid><dc:creator>Alex</dc:creator><pubDate>Sat, 01 Nov 2014 04:41:54 GMT</pubDate></item><item><title>Как сделать слияние masters с github pages</title><description>&lt;p&gt;Сабж, создаем бранч, мержим с продактишном и коммитим:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout --orphan gh-pages
git merge master
git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если есть желание всегда обновлять gh-pages при коммите можно добавить в файл .git/config, секцию [remote "origin"]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;push = +refs/heads/master:refs/heads/gh-pages
push = +refs/heads/master:refs/heads/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ссылки:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/creating-project-pages-manually/"&gt;Creating Project Pages manually&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><link>http://aldb.github.io/2014/10/26/sozdat-stranichku-na-github-pages/</link><guid isPermaLink="false">337f6e79-f670-4e50-844a-1a0d5febf6ff</guid><category>github pages</category><dc:creator>Alex</dc:creator><pubDate>Mon, 27 Oct 2014 03:19:35 GMT</pubDate></item><item><title>Разница datetime и timestamp</title><description>&lt;p&gt;Datetime и timestamp типы данных в MySQL для хранения информации по дате. Их основные отличия:&lt;/p&gt;

&lt;h5 id="datetime"&gt;Datetime&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;8 байт без часового пояса&lt;/li&gt;
&lt;li&gt;DEFAULT CURRENT&lt;em&gt;TIMESTAMP / ON UPDATE CURRENT&lt;/em&gt;TIMESTAMP устанавливает время по умолчанию (&lt;strong&gt;MySQL 5.6.5&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Запросы не кешируются по умолчанию&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id="timestamp"&gt;Timestamp&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;4 байта с часовым поясом&lt;/li&gt;
&lt;li&gt;хранит время &lt;strong&gt;UTC&lt;/strong&gt;(Гринвич)&lt;/li&gt;
&lt;li&gt;в версии до &lt;strong&gt;MySQL 5.6.1&lt;/strong&gt; не более 2 TIMESTAMP колонок в одной таблице, в версии &lt;strong&gt;MySQL 5.6.5&lt;/strong&gt;+ без ограничений&lt;/li&gt;
&lt;li&gt;Запросы кешируются по умолчанию&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Свойство DEFAULT CURRENTTIMESTAMP / ON UPDATE CURRENTTIMESTAMP  может быть примененно только для одной колонке:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE `test` (
  `id` INT(10) UNSIGNED NOT NULL,
  `AddedDate` TIMESTAMP NOT NULL DEFAULT                CURRENT_TIMESTAMP,
  `UpdatedDate` TIMESTAMP NOT NULL DEFAULT      CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
  ) ENGINE=INNODB;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ошибка:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Error Code : 1293
    Incorrect table definition; there can be only one TIMESTAMP column with CURRENT_TIMESTAMP in DEFAULT or ON UPDATE clause
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=""&gt;Когда использовать:&lt;/h4&gt;

&lt;h5 id="datetime"&gt;datetime:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Колонки с фиксированными данными(логирование, день рождения, данные о покупке и т.п)&lt;/li&gt;
&lt;li&gt;Хорошая ассоциация datetime это часы и календарь на стене, при этом не важно в какой часовой зоне находиться дом в котором они висят.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id="timestamp"&gt;timestamp:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Колонки с часто обновляемыеми данными(последняя авторизация пользователя, дата и время обновления рейтинга/очков/счета и т.п.)&lt;/li&gt;
&lt;li&gt;Ассоциация: момент времени, т.е. как давно событие. Точный расчет момент времени напрямую зависит от того в каком часовом поясе вы находитесь.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ссылки:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dev.mysql.com/doc/refman/5.1/en/datetime.html"&gt;Mysql manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/4489548/why-there-can-be-only-one-timestamp-column-with-current-timestamp-in-default-cla"&gt;Подробнее про ошибку 1293&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/409286/datetime-vs-timestamp"&gt;datetime vs timestamp?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><link>http://aldb.github.io/2014/10/21/raznitsa-datetime-i-timestamp/</link><guid isPermaLink="false">b0979971-d700-44b9-afc9-7f816446c7ab</guid><category>sql</category><category>mysql</category><dc:creator>Alex</dc:creator><pubDate>Wed, 22 Oct 2014 05:13:59 GMT</pubDate></item><item><title>Установка phpunit</title><description>&lt;p&gt;Все знаем что phpunit модно, стильно, молодежно.
И вот как ее быстро установить:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pear channel-discover pear.phpunit.de
pear channel-discover pear.symfony-project.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В случаи проблемы с правами добавляем волшебное "sudo"
Таким образом мы добавили  &lt;strong&gt;PEAR Installer&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pear install phpunit/PHPUnit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Который в свою очередь установит PHPUnit. Но PHPUnit любит поругаться на недостающие модули:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install php5-dev
pecl install xdebug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;После этого все должно заработать, проверить версию PHPUnit можно командой &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;phpunit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В дополнения простенький пример теста:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class StackTest extends PHPUnit_Framework_TestCase
{
    public function testPushAndPop()
    {
        $stack = array();
        $this-&amp;gt;assertEquals(0, count($stack));

        array_push($stack, 'foo');
        $this-&amp;gt;assertEquals('foo',$stack[count($stack)-1]);
        $this-&amp;gt;assertEquals(1, count($stack));

        $this-&amp;gt;assertEquals('foo',array_pop($stack));
        $this-&amp;gt;assertEquals(0, count($stack));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Подробнее можно посмотреть в &lt;a href="https://phpunit.de/manual/current/en/writing-tests-for-phpunit.html"&gt;документации&lt;/a&gt;, где все примеры с закрывающим тегом&amp;lt; ?  &lt;i class="fa fa-wheelchair"&gt;&lt;/i&gt;facepalm&lt;/p&gt;</description><link>http://aldb.github.io/2014/10/20/ustanovka-phpunit/</link><guid isPermaLink="false">cdbbfc04-3c09-4f8b-9726-140d5b0a2b9a</guid><category>php</category><category>phpunit</category><category>установка</category><dc:creator>Alex</dc:creator><pubDate>Mon, 20 Oct 2014 07:01:32 GMT</pubDate></item><item><title>SQL комиксы!</title><description>&lt;h3 id="i"&gt;I&lt;/h3&gt;

&lt;p&gt;&lt;img src="http://aldb.github.io/content/images/2014/10/sql_comics2.png" alt=""&gt;&lt;/p&gt;

&lt;h3 id="ii"&gt;II&lt;/h3&gt;

&lt;p&gt;&lt;img src="http://aldb.github.io/content/images/2014/10/sql_comics1.png" alt=""&gt;&lt;/p&gt;</description><link>http://aldb.github.io/2014/10/18/sql-komiksy/</link><guid isPermaLink="false">ee006c80-0bfb-4d15-8d99-cb2d9bdb89e3</guid><category>sql</category><category>comics</category><dc:creator>Alex</dc:creator><pubDate>Sat, 18 Oct 2014 16:53:47 GMT</pubDate></item><item><title>About</title><description>&lt;p&gt;&lt;br&gt; &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Hello! &lt;br&gt;
My name is &lt;strong&gt;Alex&lt;/strong&gt; and this is my blog on github. &lt;br&gt;
I'm interested in web development, so this blog is about it.&lt;/p&gt;

&lt;p&gt;If you want to contact me, please use my email: alexs.dbk@gmail.com&lt;/p&gt;</description><link>http://aldb.github.io/2014/10/16/about/</link><guid isPermaLink="false">dc9dfdb4-4c70-4444-9cc8-0871833b5eff</guid><category>about</category><dc:creator>Alex</dc:creator><pubDate>Thu, 16 Oct 2014 07:27:33 GMT</pubDate></item><item><title>Как создать блог на github.io используя CMS Ghost</title><description>&lt;p&gt;Github предоставляет всем своим пользователям создать статический блог в домене github.io. При это предлагает использовать Jekyll. Но сегодня мы поговорим как сделать блог на гитхабе с cms &lt;strong&gt;ghost&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Я не хочу создавать, я хочу &lt;a href="http://aldb.github.io/"&gt;demo&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;На создание блога нам потребуется &lt;strong&gt;3 Этапа&lt;/strong&gt;:&lt;/p&gt;

&lt;h3 id="i"&gt;I этап&lt;/h3&gt;

&lt;p&gt;Необходимо создать открытый репозиторий на Git, который создаст поддомен с вашим именем пользователя(&lt;a href="http://username.github.io/"&gt;http://username.github.io&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Следуем &lt;a href="https://pages.github.com/"&gt;инструкции&lt;/a&gt; создадим &lt;a href="https://github.com/new"&gt;репозиторий&lt;/a&gt; c именем нашего пользователя на github.&lt;/p&gt;

&lt;h3 id="ii"&gt;II Этап&lt;/h3&gt;

&lt;p&gt;Настройка локального окружения и создание блога.&lt;/p&gt;

&lt;p&gt;Нам потребуется Node.js 0.10.x (latest stable). Для работы с Ghost рекомендуют Node.js 0.10.30 и пакетный менеджер npm 1.4.21. Ниже будут примеры кода под Linux Ссылки для других платформ:&lt;a href="http://support.ghost.org/installing-ghost-mac/"&gt;Mac&lt;/a&gt; &lt;a href="http://support.ghost.org/installing-ghost-windows/"&gt;Windows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Установим ghost&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir ghost
wget "http://ghost.org/zip/ghost-latest.zip"
unzip ghost-latest.zip -d ghost
cd ghost
cp config.example.js config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Установим nodejs &amp;amp; npm&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install nodejs
sudo apt-get install npm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Изменим &lt;strong&gt;URL&lt;/strong&gt; адрес в config.js раздел Development с &lt;a href="http://localhost:2368/"&gt;http://localhost:2368&lt;/a&gt; на &lt;a href="http://username.github.io/"&gt;http://username.github.io&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// ### Development **(default)**    development: {
// The url to use when providing links to the site, E.g. in RSS and email.
// Change this to your Ghost blogs published URL.
url: 'http://username.github.io',

// Example mail config
// Visit http://support.ghost.org/mail for instructions
// ```
//  mail: {
//      transport: 'SMTP',
//      options: {
//          service: 'Mailgun',
//          auth: {
//              user: '', // mailgun username
//              pass: ''  // mailgun password
//          }
//      }
//  },
// ``
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Зайдем в папку ghost, установим и запустим npm&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://aldb.github.io/content/images/2014/10/npminstall.png" alt="npm-start"&gt;&lt;/p&gt;

&lt;p&gt;Зайдем &lt;a href="http://127.0.0.1:2368/ghost/"&gt;http://127.0.0.1:2368/ghost/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://aldb.github.io/content/images/2014/10/ghost-wellcome.png" alt="ghost"&gt;&lt;/p&gt;

&lt;p&gt;Создание и настройка блока а также редактирования постов(по примеру шаблона) интуитивно понятны. Так же всегда можно найти информацию на &lt;a href="https://ghost.org/"&gt;https://ghost.org/&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="iii"&gt;III Этап&lt;/h3&gt;

&lt;p&gt;Создание статичного блога и 'commit' на github&lt;/p&gt;

&lt;p&gt;Что бы сделать ghost статичным Нам потребуется &lt;strong&gt;Buster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://aldb.github.io/content/images/2014/10/buster.png" alt="buster"&gt;&lt;/p&gt;

&lt;p&gt;Установка&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install wget
sudo apt-get install python
sudo apt-get install python-pip
pip install buster
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Проверяем запущен наш блог &lt;a href="http://127.0.0.1:2368/"&gt;http://127.0.0.1:2368&lt;/a&gt; или запускаем:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ghost
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Создадим новую папку для статичной версии блога.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ghost
cd buster setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Запускаем бустер&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buster setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Указываем ссылку на github репозиториий:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/username/username.github.io 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Бустер сгенерировал папку static. Теперь захватим бустером приведение, т.е. наш локальный ghost.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buster generate --domain=http://127.0.0.1:2368
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для предпросмотра запустим:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buster preview 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Теперь наш статичный блог можно посмотреть &lt;a href="http://127.0.0.1:9000/"&gt;http://127.0.0.1:9000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Останавливаем отображение превью &lt;strong&gt;Control + C&lt;/strong&gt;. Загружаем блог на Git:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buster deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Теперь или спустя пару минут он будет доступен &lt;a href="http://username.github.io/"&gt;http://username.github.io&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=""&gt;Ложка дёгтя&lt;/h6&gt;

&lt;p&gt;У меня не получился deploy в Git через buster. Но я сделал 'commit' через терминал.
Так же buster не хочет ловить статичные страницы ghost'a. Решил их просто оформлять постами.&lt;/p&gt;

&lt;h3 id=""&gt;Повседневное использование&lt;/h3&gt;

&lt;p&gt;Запускаем ghost и редактируем посты &lt;a href="http://127.0.0.1:2368/ghost"&gt;http://127.0.0.1:2368/ghost&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Buster&lt;/strong&gt; генерирует статичную версию и делает 'commit'.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buster generate --domain=http://127.0.0.1:2368    
buster deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=""&gt;Заключение&lt;/h3&gt;

&lt;p&gt;Плюсы использование статичного блога на Github&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Бесплатно&lt;/li&gt;
&lt;li&gt;Не нужна БД&lt;/li&gt;
&lt;li&gt;Высокая производительность&lt;/li&gt;
&lt;li&gt;Возможность легкого бэкап&lt;/li&gt;
&lt;li&gt;Возможность создать посты оффлайн&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id="c"&gt;Cсылки:&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Оригинальная статья: &lt;a href="http://talalanwar.com/host-a-ghost-blog-for-free/"&gt;How to: Host a Ghost Blog for Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Набор ссылок по установке cms ghost: &lt;a href="http://ghost.centminmod.com/how-to-install-ghost-blogging-platform/"&gt;Ghost How to install Ghost blogging platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Git репозиторий &lt;a href="https://github.com/axitkhurana/buster"&gt;buster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><link>http://aldb.github.io/2014/10/14/kak-sozdat-blogh-na-github-io-ispolzuia-cms-ghost/</link><guid isPermaLink="false">0737aed8-60e9-4f85-883c-727c720d3451</guid><category>ghost</category><category>github</category><category>github pages</category><category>nodejs</category><category>npm</category><category>cms</category><category>blog</category><category>buster</category><dc:creator>Alex</dc:creator><pubDate>Wed, 15 Oct 2014 01:30:03 GMT</pubDate></item></channel></rss>