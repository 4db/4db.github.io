---
layout: post
title: SQL Joins
date: 2015-02-13 21:38:39.000000000 -08:00
category: programming
tags: [sql,mysql,join,en]
img: /assets/img/posts/2016/sql.png
permalink: /:year/:month/:day/:title/
order: 42
---
Differense between SQL JOINs is the most popular question on enterview.
So create **Table a** is on the left, and **Table b** is on the right.

#### Create tables
<pre>
+------++------+
| <b>a</b>    || <b>b</b>    |
+------++------+
|    <span style="color:green">1</span> ||    <span style="color:green">1</span> |
|    <span style="color:green">2</span> ||    <span style="color:green">2</span> |
| <span style="color:#ccc">NULL</span> || <span style="color:#ccc">NULL</span> |
|   <span style="color:red">10</span> ||   <span style="color:red">20</span> |
+------++------+
</pre>Sql query:

{% highlight sql %}
    DROP TABLE IF EXISTS `a`;
    CREATE TABLE `a` (
      `a` int(11) NULL
    ) ENGINE=InnoDB AUTO_INCREMENT=0;

    INSERT INTO `a` ( `a`) 
    VALUES 
      ( '1'),
      ( '2'),
      ( NULL),
      ( 10);


    DROP TABLE IF EXISTS `b`;
    CREATE TABLE `b` (
      `b` int(11) NULL
    ) ENGINE=InnoDB AUTO_INCREMENT=0;

    INSERT INTO `b` ( `b`) 
    VALUES 
      ( '1'),
      ( '2'),
      ( NULL),
      ( 20);
{% endhighlight %}
#### ~~INNER~~ JOIN AND STRAIGHT\_JOIN

*The INNER JOIN keyword selects all rows from both tables. INNER JOIN is the same as JOIN.*

*A **STRAIGHT\_JOIN** identifies and combines matching rows which are stored in two related tables. This is what an inner join also does. The difference between an inner join and a straight join is that a straight join forces MySQL to read the **left table first**.*

![]

{% highlight sql %}
    SELECT * FROM a JOIN b ON a=b;
    SELECT * FROM b JOIN a ON b=a;
{% endhighlight %}
<pre>
+------+------+
| <b>a</b>    | <b>b</b>    |
+------+------+
|    <span style="color:green">1</span> |    <span style="color:green">1</span> |
|    <span style="color:green">2</span> |    <span style="color:green">2</span> |
+------+------+
</pre>
Without condition ON we make **CROSS JOIN**

{% highlight sql %}
    SELECT * FROM b JOIN a;
    SELECT * FROM a,b; 
{% endhighlight %}
OR

{% highlight sql %}
     SELECT FROM a CROSS JOIN b;
{% endhighlight %}
![][1]

    +------+------+
    | b    | a    |
    +------+------+
    |    1 |    1 |
    |    2 |    1 |
    | NULL |    1 |
    |   20 |    1 |
    |    1 |    2 |
    |    2 |    2 |
    | NULL |    2 |
    |   20 |    2 |
    |    1 | NULL |
    |    2 | NULL |
    | NULL | NULL |
    |   20 | NULL |
    |    1 |   10 |
    |    2 |   10 |
    | NULL |   10 |
    |   20 |   10 |
    +------+------+
#### LEFT JOIN == LEFT ~~OUTER~~ JOIN

*The LEFT JOIN keyword returns all rows from the left table (A), with the matching rows in the right table (B). The result is NULL in the right side when there is no match.*

{% highlight sql %}
    SELECT * FROM a LEFT JOIN b ON a=b;
{% endhighlight %}
![][2]
<pre>
+------+------+
| <b>a</b>    | <b>b</b>    |
+------+------+
|    1 |    1 |
|    2 |    2 |
| NULL | <span style="color:red">NULL</span> |
|   10 | <span style="color:red">NULL</span> |
+------+------+
</pre>
If add WHERE condition:

{% highlight sql %}
    SELECT * FROM a LEFT JOIN b ON a=b WHERE b IS NULL;
{% endhighlight %}
![][3]
<pre>
+------+------+
| a    | b    |
+------+------+
| NULL | NULL |
|   10 | NULL |
+------+------+
</pre>
#### RIGHT JOIN = RIGHT ~~OUTER~~ JOIN

*The RIGHT JOIN keyword returns all rows from the right table (B), with the matching rows in the left table (A). The result is NULL in the left side when there is no match.*

{% highlight sql %}
    SELECT * FROM a RIGHT JOIN b ON a=b
{% endhighlight %}
![][4]

<pre>
+------+------+
| a    | b    |
+------+------+
|    1 |    1 |
|    2 |    2 |
| <span style="color:red">NULL</span> | NULL |
| <span style="color:red">NULL</span> |   20 |
+------+------+
</pre>
{% highlight sql %}
    SELECT * FROM a RIGHT JOIN b ON a=b WHERE a IS NULL
{% endhighlight %}
![][5]

<pre>
+------+------+
| a    | b    |
+------+------+
| NULL | NULL |
| NULL |   20 |
+------+------+
</pre>
#### FULL OUTER

*The FULL OUTER JOIN keyword returns all rows from the left table (A) and from the right table (B). The FULL OUTER JOIN keyword combines the result of both LEFT and RIGHT joins.*
{% highlight sql %}
    SELECT * FROM a FULL OUTER JOIN b ON a=b
{% endhighlight %}
MYSQL donâ€™t have FULL JOINS, but can sure [emulate] them.

{% highlight sql %}
    SELECT * FROM a LEFT JOIN b ON a = b
    UNION
    SELECT * FROM a RIGHT JOIN b ON a=b
{% endhighlight %}
![][6]

<pre>
+------+------+
| a    | b    |
+------+------+
<span style="color:green">|    1 |    1 |
|    2 |    2 |
| NULL | NULL |</span>
|   10 | <span style="color:red">NULL</span> |
| <span style="color:red">NULL</span> |   20 |
+------+------+
</pre>
    {% highlight sql %}
    SELECT * FROM a FULL OUTER JOIN b ON a=b
    WHERE a IS null OR b IS null
    {% endhighlight %}
For MYSQL:


{% highlight sql %}
SELECT * FROM a LEFT JOIN b ON a = b WHERE b IS NULL
UNION 
SELECT * FROM a RIGHT JOIN b ON a=b WHERE a IS NULL; 
{% endhighlight %}

![][7]

<pre>
+------+------+
| a    | b    |
+------+------+
<span style="color:green">| NULL | NULL |</span>
|   10 | <span style="color:red">NULL</span> |
| <span style="color:red">NULL</span> |   20 |
+------+------+
</pre>
  []: ../../../../assets/img/posts/2015/02/join1.png
  [1]: ../../../../assets/img/posts/2015/02/join8.png
  [2]: ../../../../assets/img/posts/2015/02/join2.png
  [3]: ../../../../assets/img/posts/2015/02/join3.png
  [4]: ../../../../assets/img/posts/2015/02/join4.png
  [5]: ../../../../assets/img/posts/2015/02/join5.png
  [emulate]: http://dev.mysql.com/doc/refman/5.0/en/outer-join-simplification.html
  [6]: ../../../../assets/img/posts/2015/02/join6.png
  [7]: ../../../../assets/img/posts/2015/02/join7.png
